basePath: /
definitions:
  auth.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.AuthorGetResponse:
    properties:
      biography:
        type: string
      name:
        type: string
      photo_url:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  dto.RefreshRequest:
    properties:
      refresh_token:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  dto.SaveAuthorRequest:
    properties:
      author_id:
        type: integer
      user_id:
        type: integer
    type: object
  user.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      photo:
        type: string
      role:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: API для backend
  title: Backend API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Выполняет вход пользователя и возвращает токены
      parameters:
      - description: Учетные данные
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная аутентификация
          schema:
            $ref: '#/definitions/auth.Token'
        "400":
          description: Ошибка в запросе
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Аутентификация пользователя
      tags:
      - auth
  /auth/logout:
    post:
      description: Деактивирует токен пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "500":
          description: Failed to log out
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Выход пользователя
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновляет access токен с помощью refresh токена
      parameters:
      - description: Refresh токен
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Новые access и refresh токены
          schema:
            $ref: '#/definitions/auth.Token'
        "400":
          description: Ошибка в запросе
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновление токена
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя в системе
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная регистрация
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Ошибка в запросе
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Регистрация пользователя
      tags:
      - auth
  /author/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete selected author
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Author deleted successfully
          schema:
            type: string
        "404":
          description: Author not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete author
      tags:
      - authors
  /author/get/{id}:
    get:
      consumes:
      - application/json
      description: Get selected author information
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Author information
          schema:
            $ref: '#/definitions/user.User'
        "404":
          description: Author not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get author
      tags:
      - authors
  /author/list:
    get:
      consumes:
      - application/json
      description: Get list of authors
      produces:
      - application/json
      responses:
        "200":
          description: List of authors
          schema:
            items:
              $ref: '#/definitions/dto.AuthorGetResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get authors list
      tags:
      - authors
  /author/update/{id}:
    put:
      consumes:
      - multipart/form-data
      description: Update selected author information with optional photo upload
      parameters:
      - description: Author data in JSON format
        in: formData
        name: author
        required: true
        type: string
      - description: photo
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Author updated successfully
          schema:
            type: string
        "400":
          description: Bad request - invalid data
          schema:
            type: string
        "404":
          description: Author not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update author information
      tags:
      - authors
  /saved-author/create:
    post:
      consumes:
      - application/json
      description: Save author to user's saved list
      parameters:
      - description: Save author request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SaveAuthorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Author saved successfully
          schema:
            type: string
        "400":
          description: Bad request - invalid data
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Save author
      tags:
      - saved_authors
  /saved-author/delete:
    delete:
      consumes:
      - application/json
      description: Remove author from user's saved list
      parameters:
      - description: Author ID
        in: query
        name: author_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Author removed successfully
          schema:
            type: string
        "400":
          description: Bad request - invalid author ID
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete saved author
      tags:
      - saved_authors
  /saved-author/list:
    get:
      consumes:
      - application/json
      description: Get list of user's saved authors
      produces:
      - application/json
      responses:
        "200":
          description: List of saved authors
          schema:
            items:
              $ref: '#/definitions/dto.AuthorGetResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get saved authors list
      tags:
      - saved_authors
  /user:
    delete:
      consumes:
      - application/json
      description: Delete current authenticated user's account (soft delete)
      produces:
      - application/json
      responses:
        "200":
          description: 'message: User deleted successfully'
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: 'error: Unauthorized'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: 'error: Internal server error'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user account
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get current authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - multipart/form-data
      description: Update current authenticated user's profile information and photo
      parameters:
      - description: User data in JSON format
        in: formData
        name: user
        required: true
        type: string
      - description: Profile photo
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'message: User updated successfully'
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: 'error: Unauthorized'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: 'error: Internal server error'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'Введите токен в формате: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Операции с пользователями
  name: user
